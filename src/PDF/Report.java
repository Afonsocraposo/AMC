package PDF;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import com.itextpdf.text.Image;


 
public class Report {
	
    public static String timeStampFile = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(Calendar.getInstance().getTime());

    public static void main(String[] args)
    	throws DocumentException, IOException {
    	PatientInfo patient = new PatientInfo();
    	String DEST = "results_pdf/Report-" + timeStampFile + ".pdf";
        File file = new File(DEST);
        file.getParentFile().mkdirs();
    	new Report().createPdf(DEST, patient);
    }
 
    
    public void createPdf(String dest, PatientInfo pat)
	    throws DocumentException, IOException {
    	
    	String timeStamp = new SimpleDateFormat("yyyy/MM/dd   HH:mm:ss").format(Calendar.getInstance().getTime());

    	
    	Font title = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 30);
    	title.setColor(new BaseColor(39, 140, 153));
    	Font subtitle = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20);
    	Font h3 = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
    	Font h4 = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);
    	Font p = FontFactory.getFont(FontFactory.HELVETICA, 12);
    	Font pp = FontFactory.getFont(FontFactory.HELVETICA, 8);
    	
    	
    	PdfPCell cell;
 	
    	Document document = new Document();
    	document.setMargins(50, 50, 50, 50);
        PdfWriter.getInstance(document, new FileOutputStream(dest));
        document.open();
        
        int currentYear = Integer.parseInt(timeStamp.substring(0,4));
        int currentMonth = Integer.parseInt(timeStamp.substring(5,7));
        int currentDay = Integer.parseInt(timeStamp.substring(8,10));
        int age = currentYear - pat.birth_year - 1;
        
        if(currentMonth>=pat.birth_month) {
        	if(currentDay>=pat.birth_day) {
        		age ++;
        	}
        }
        
        String safe;
        
        if(pat.result=="NEGATIVE") {
        	safe="SAFE";
        } else {
        	safe= "NOT SAFE";
        }
        
        String para1 = "MEDICINE FOR DUMMIES";
        String para2 = "Medical Report";     
        String para3 = pat.exam + " EXAM:";  
        String para4 = "EXAM RESULT:"; 
        String para5 = "After examination and comparasion with previous cases of " + pat.exam + ", the result for this exam is " + pat.result + ". You're "+safe+"!";
        String para6 = "Comments:";
        String para7 = pat.comments;
        String para8 = "Dr. " + pat.doctor;
        String para9 = "This report was automatically generated by the Medicine for Dummies software developed by some students in the scope of the AMC course project. Please contact a medical professional for further information on the diagnosis.";

        
        // Creating Paragraphs       
        Paragraph paragraph1 = new Paragraph(para1,title); 
        paragraph1.setIndentationLeft(120);
        Paragraph paragraph2 = new Paragraph(para2,subtitle);
        paragraph2.setIndentationLeft(120);
        Paragraph paragraph3 = new Paragraph(para3,h3);
        Paragraph paragraph4 = new Paragraph(para4,h3);
        Paragraph paragraph5 = new Paragraph(para5,p);
        Paragraph paragraph6 = new Paragraph(para6,h4);
        Paragraph paragraph7 = new Paragraph(para7,p);
        Paragraph paragraph8 = new Paragraph(para8,h4);
        paragraph8.setAlignment(Element.ALIGN_RIGHT);
        paragraph8.setIndentationRight(50);
        Paragraph paragraph9 = new Paragraph(para9,pp);
        

        
        
// ------------------ CLIENT TABLE ----------------------
        
        //Create the table which will be 8 Columns wide and make it 100% of the page
        PdfPTable clientTable = new PdfPTable(8);
        clientTable.setWidthPercentage(100.0f);

        
        // Create cells to add to table
        
        cell = new PdfPCell(new Paragraph("Patient Identification",h3));
        cell.setColspan(8);
        cell.setBorder(PdfPCell.TOP);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);

        cell = new PdfPCell(new Paragraph("Name:",h4));
        cell.setColspan(1);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(pat.name,p));
        cell.setColspan(3);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Gender:",h4));
        cell.setColspan(1);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(pat.gender,p));
        cell.setColspan(1);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Age:",h4));
        cell.setColspan(1);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(Integer.toString(age),p));
        cell.setColspan(1);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(" ",p));
        cell.setColspan(4);
        cell.setBorder(PdfPCell.NO_BORDER);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Date of Birth:",h4));
        cell.setColspan(2);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(pat.birth_year+"-"+pat.birth_month+"-"+pat.birth_day,p));
        cell.setColspan(2);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Responsible",h3));
        cell.setColspan(8);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Doctor:",h4));
        cell.setColspan(1);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(pat.doctor,p));
        cell.setColspan(7);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(" ",p));
        cell.setColspan(8);
        cell.setBorder(PdfPCell.NO_BORDER);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Diagnostic Exam",h4));
        cell.setColspan(6);
        cell.setBorder(PdfPCell.BOTTOM);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph("Date/Time",h4));
        cell.setColspan(2);
        cell.setBorder(PdfPCell.BOTTOM);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(pat.exam,h3));
        cell.setColspan(6);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        clientTable.addCell(cell);
        
        cell = new PdfPCell(new Paragraph(timeStamp,p));
        cell.setColspan(2);
        cell.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        clientTable.addCell(cell);
        
 // ------------------ END CLIENT TABLE -----------------
        
        
        
        
// ------------------ SIGNS TABLE ----------------------
        
        PdfPTable signsTable;
        
        //Create the table which will be 8 Columns wide and make it 100% of the page
        if(pat.signs.size()>10) {
        	signsTable = new PdfPTable(4);
            signsTable.setWidthPercentage(30);
            signsTable.setHorizontalAlignment(Element.ALIGN_LEFT);
            
            cell = new PdfPCell(new Paragraph("Sign",h4));
            cell.setColspan(1);
            cell.setBorder(PdfPCell.BOTTOM);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            signsTable.addCell(cell);
            
            cell = new PdfPCell(new Paragraph("Value",h4));
            cell.setColspan(1);
            cell.setBorder(PdfPCell.BOTTOM | PdfPCell.RIGHT );
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            signsTable.addCell(cell);
            
            cell = new PdfPCell(new Paragraph("Sign",h4));
            cell.setColspan(1);
            cell.setBorder(PdfPCell.BOTTOM);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            signsTable.addCell(cell);
            
            cell = new PdfPCell(new Paragraph("Value",h4));
            cell.setColspan(1);
            cell.setBorder(PdfPCell.BOTTOM);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            signsTable.addCell(cell);
            
            for(int i = 0; i<10; i++) {
	        	
	        	cell = new PdfPCell(new Paragraph(Integer.toString(i+1),p));
	            cell.setColspan(1);
	            cell.setBorder(PdfPCell.NO_BORDER);
	            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	            signsTable.addCell(cell);
	            
	            cell = new PdfPCell(new Paragraph(Integer.toString(pat.signs.get(i)),p));
	            cell.setColspan(1);
	            cell.setBorder(PdfPCell.RIGHT);
	            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	            signsTable.addCell(cell);
	            
	            try {
	            	
	            	int value = pat.signs.get(10+i);
	        		
	            	cell = new PdfPCell(new Paragraph(Integer.toString(10+i+1),p));
		            cell.setColspan(1);
		            cell.setBorder(PdfPCell.NO_BORDER);
		            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		            signsTable.addCell(cell);
		            
	        		cell = new PdfPCell(new Paragraph(Integer.toString(value),p));
		            cell.setColspan(1);
		            cell.setBorder(PdfPCell.NO_BORDER);
		            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		            signsTable.addCell(cell);
		            
	            }catch(Exception e) {
	            	cell = new PdfPCell(new Paragraph(" "));
	                cell.setColspan(1);
	                cell.setBorder(PdfPCell.NO_BORDER);
	                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	                signsTable.addCell(cell);
	                
	                cell = new PdfPCell(new Paragraph(" "));
	                cell.setColspan(1);
	                cell.setBorder(PdfPCell.NO_BORDER);
	                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	                signsTable.addCell(cell);
	            }
	        		
	        }


        } else if (pat.signs.size()>0) {
	        signsTable = new PdfPTable(2);
	        signsTable.setWidthPercentage(30);
	        signsTable.setHorizontalAlignment(Element.ALIGN_LEFT);
	        
	        cell = new PdfPCell(new Paragraph("Sign",h4));
	        cell.setColspan(1);
	        cell.setBorder(PdfPCell.BOTTOM);
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        signsTable.addCell(cell);
	        
	        cell = new PdfPCell(new Paragraph("Value",h4));
	        cell.setColspan(1);
	        cell.setBorder(PdfPCell.BOTTOM);
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        signsTable.addCell(cell);
                
	        for(int i = 0; i<10; i++) {
	        	
	        	try {
	        		int value = pat.signs.get(i);
	        		
	            	cell = new PdfPCell(new Paragraph(Integer.toString(i+1),p));
		            cell.setColspan(1);
		            cell.setBorder(PdfPCell.NO_BORDER);
		            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		            signsTable.addCell(cell);
		            
	        		cell = new PdfPCell(new Paragraph(Integer.toString(value),p));
		            cell.setColspan(1);
		            cell.setBorder(PdfPCell.NO_BORDER);
		            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		            signsTable.addCell(cell);
	            	
	            	
	            }catch(Exception e) {
	            	cell = new PdfPCell(new Paragraph(" "));
	                cell.setColspan(1);
	                cell.setBorder(PdfPCell.NO_BORDER);
	                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	                signsTable.addCell(cell);
	                
	                cell = new PdfPCell(new Paragraph(" "));
	                cell.setColspan(1);
	                cell.setBorder(PdfPCell.NO_BORDER);
	                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	                signsTable.addCell(cell);
	            }
	        		
	        }
        }else {
        
	        signsTable = new PdfPTable(1);

        
	        if(pat.signs.size()==0) {
	        	for(int i = 0; i<10; i++) {
	            	
	            	cell = new PdfPCell(new Paragraph(" "));
	                cell.setColspan(1);
	                cell.setBorder(PdfPCell.NO_BORDER);
	                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	                signsTable.addCell(cell);
	
	            }
        }
	        
        }
        
               
        
        
        
        
// ------------------ END SIGNS TABLE -----------------
        
 // ------------------ IMAGES -----------------
        // Creating Images
        Image logo = Image.getInstance("images/logo.png");
        logo.scalePercent(20);
        logo.setAbsolutePosition(60, document.getPageSize().getHeight()-120);
        document.add(logo);
        
        Image example = Image.getInstance("images/example.jpg");
        example.scalePercent(25);
        example.setAbsolutePosition(250, 270);
        document.add(example);
        
// --------------------------------------------
        
        // Adding paragraphs to document       
        document.add(paragraph1);       
        document.add(paragraph2); 
        document.add(new Paragraph(" "));
        
        // Adding table
        document.add(clientTable);
        
        document.add(new Paragraph(" "));
        document.add(paragraph3);
        document.add(new Paragraph(" "));
        
        // Adding table
        document.add(new Paragraph("Patient Signs:",h4));
        document.add(new Paragraph(" "));
        document.add(signsTable);
        
        document.add(new Paragraph(" "));
        document.add(paragraph4);
        document.add(paragraph5);
        document.add(new Paragraph(" "));
        
        document.add(paragraph6);
        document.add(paragraph7);
        
        document.add(new Paragraph(" "));
        document.add(paragraph8);
        
        document.add(new Paragraph(" "));
        document.add(paragraph9);
        
        
        
        document.close();
      
        Desktop.getDesktop().open(new File(dest));

        System.out.println("PDF successfully generated!");
    
    }
    
}
